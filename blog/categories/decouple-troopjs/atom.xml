<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Decouple TroopJS | Jade's fantastic Blog]]></title>
  <link href="http://zjhiphop.github.com/blog/categories/decouple-troopjs/atom.xml" rel="self"/>
  <link href="http://zjhiphop.github.com/"/>
  <updated>2013-08-21T13:42:10+08:00</updated>
  <id>http://zjhiphop.github.com/</id>
  <author>
    <name><![CDATA[zjhiphop]]></name>
    <email><![CDATA[zjhiphop@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Troopjs code analysis of Factory]]></title>
    <link href="http://zjhiphop.github.com/blog/2013/08/13/troopjs-code-analysis-of-factory/"/>
    <updated>2013-08-13T13:26:00+08:00</updated>
    <id>http://zjhiphop.github.com/blog/2013/08/13/troopjs-code-analysis-of-factory</id>
    <content type="html"><![CDATA[<blockquote><p>The factory method pattern is an object-oriented creational design pattern to implement the concept of factories and deals with the problem of creating objects (products) without specifying the exact class of object that will be created.</p></blockquote>

<h3>The <a href="https://github.com/troopjs/troopjs-core/blob/develop/component/factory.js">factory</a> of troopjs actually is a basic widget <strong>composer</strong>, it is a <strong>decorator</strong> at the same time. It's based on ECMA Script 5 <strong>Object</strong> which enable you todo following staff:</h3>

<ul>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fcreate">Object.Create</a></strong> Creates a new object with the specified prototype object and properties.</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2FdefineProperty">Object.defineProperty</a></strong> Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.

<ul>
<li>configurable</li>
<li>enumerable</li>
<li>value</li>
<li>writable</li>
<li>get</li>
<li>set</li>
</ul>
</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2FdefineProperties">Object.defineProperties</a></strong> Defines new or modifies existing properties directly on an object, returning the object.</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2FpropertyIsEnumerable">propertyIsEnumerable</a></strong></li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys">Object.keys</a></strong> Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">Object.getOwnPropertyNames</a></strong> Returns an array of all properties (enumerable or not) found directly upon a given object.</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">Object.getOwnPropertyDescriptor</a></strong></li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a></strong> Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.</li>
<li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf</a></strong> Returns the prototype (i.e. the internal [[Prototype]]) of the specified object.</li>
<li><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">Object.preventExtensions</a></strong> Prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).</p></li>
<li><p>But how to does Object-base Inheritance works? See <a href="http://uxebu.com/blog/2011/02/23/object-based-inheritance-for-ecmascript-5/">example</a>.</p></li>
</ul>


<h3>Decouple Factory</h3>

<ul>
<li>Decorate

<ul>
<li><strong>Before</strong> is excuted before origin function</li>
<li><strong>After</strong> is excuted after origin function</li>
<li><strong>Around</strong> is mixed with origin function</li>
</ul>
</li>
<li>Inheritance

<ul>
<li><strong>create</strong> is used to create a component</li>
<li><strong>extend</strong> is used to extend a component</li>
<li><strong>constructors</strong> are from function arguments passed to factory</li>
</ul>
</li>
<li>Detail explain

<ul>
<li><strong>special</strong> is used to handle event like: "dom/[data-action='test']/click.dbclick" from property
<code>
/^(\w+)(?::(.+?))?\/([-_./\d\w\s]+)$/
</code></li>
<li><p>factory descriptors</p>

<ul>
<li>create</li>
<li>before</li>
<li>after</li>
<li>around</li>
</ul>
</li>
<li><p>constructor descriptors</p>

<ul>
<li>protype</li>
<li>constructors

<ul>
<li>default is

<ul>
<li>"enumerable" : true,</li>
<li>"configurable" : true,</li>
<li>"writable" : true</li>
</ul>
</li>
</ul>
</li>
<li>specials</li>
<li>tostring</li>
<li>extend</li>
<li>create</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>It's a good pattern to create Mix-in component. Use case:</h3>

<pre><code>
    // component/base.js
    return Factory(
    /**
     * Creates a new component
     * @constructor
     */
    function Component() {
        var me = this;

        // Update instance count
        me[INSTANCE_COUNT] = ++INSTANCE_COUNTER;

        // Set configuration
        me[CONFIGURATION] = {};
    }, {
        "instanceCount" : INSTANCE_COUNTER,

        "displayName" : "core/component/base",

        /**
         * Configures component
         * @returns {Object} Updated configuration
         */
        "configure" : function configure() {
            return merge.apply(this[CONFIGURATION], arguments);
        },

        /**
         * Signals the component
         * @param _signal {String} Signal
         * @return {*}
         */
        "signal" : function onSignal(_signal) {
            ...
        },

        /**
         * Start the component
         * @return {*}
         */
        "start" : function start() {
            ...
        },

        /**
         * Stops the component
         * @return {*}
         */
        "stop" : function stop() {
            ...
        },

        /**
         * Creates new task
         * @param {Function} resolver
         * @param {String} [name]
         * @returns {Promise}
         */
        "task" : function task(resolver, name) {
            ...
        },

        /**
         * Generates string representation of this object
         * @returns {string} displayName and instanceCount
         */
        "toString" : function _toString() {
            ...
        }
    });
</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troopjs Architecture Analysis]]></title>
    <link href="http://zjhiphop.github.com/blog/2013/08/12/troopjs-architecture-analysis/"/>
    <updated>2013-08-12T17:17:00+08:00</updated>
    <id>http://zjhiphop.github.com/blog/2013/08/12/troopjs-architecture-analysis</id>
    <content type="html"><![CDATA[<h3>Troopjs framework is seperated by 6 different parts:</h3>

<ul>
<li><a href="https://github.com/troopjs/troopjs-core.git">troopjs-core</a> is the basic frastrate modules

<ul>
<li>component

<ul>
<li><strong>factory</strong> is the most basic
widget factory based on poly.js</li>
<li><strong>base</strong> is the most common widget which used to manage life-cycle and task.</li>
<li><strong>gadget</strong> is a observable <strong>base</strong> widget</li>
<li><strong>service</strong> is most common service lift-cycle mamager</li>
</ul>
</li>
<li>event

<ul>
<li><strong>emitter</strong> is a NodeJS style event manager, the event will be excuted by sequence</li>
</ul>
</li>
<li>logger

<ul>
<li><strong>console</strong> is a system <strong>Console</strong> wrapper</li>
<li><strong>pubsub</strong> is a hub wapper for logger topic</li>
<li><strong>service</strong> is a log service which used to wrapper message and output data to different <strong>appender</strong></li>
</ul>
</li>
<li>pubsub

<ul>
<li><strong>hub</strong> is a wrapper of event emitter</li>
<li>proxy

<ul>
<li><strong>to1x</strong> is troop 1.0 hub proxy</li>
<li><strong>to2x</strong> is troop 2.0 hub proxy</li>
</ul>
</li>
</ul>
</li>
<li>resistry

<ul>
<li><strong>service</strong> is a action service manager</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><a href="https://github.com/troopjs/troopjs-jquery.git">troopjs-jquery</a>

<ul>
<li><strong>destory</strong> is a jquery plugin used to handle dom destroy special event</li>
<li><strong>dimensions</strong> is a jquery plugin used to handle widget resize when parent resized</li>
<li><strong>hashchange</strong> is a jquery plugin used to handle has changed event and support mutiple browsers</li>
<li><strong>loom</strong> is weave function wrapper and weave css expression extender</li>
<li><strong>noconflict</strong> is jQuery noconflict wrapper</li>
<li><strong>resize</strong> is a window resize event wrapper</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><a href="https://github.com/troopjs/troopjs-requirejs.git">troopjs-requirejs</a>

<ul>
<li><strong>multiversion</strong> is used to support require multiple context widget</li>
<li><strong>shadow</strong> is used to load different version of widget at the same time</li>
<li><strong>template</strong> is troop template engine which use function context</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><a href="https://github.com/troopjs/troopjs-utils.git">troopjs-utils</a>

<ul>
<li><strong>getargs</strong>  ?????(todo: find use case)</li>
<li><strong>merge</strong> is a deep merge util method</li>
<li><strong>unique</strong> is used to filter duplicted data and consist comparator</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><a href="https://github.com/troopjs/troopjs-browser.git">troopjs-browser</a>

<ul>
<li>ajax

<ul>
<li><strong>service</strong> is a ajax request handler</li>
</ul>
</li>
<li>application

<ul>
<li><strong>widget</strong> is a base browser application life-cycle manager</li>
</ul>
</li>
<li>component

<ul>
<li><strong>widget</strong> is a base dom component widget life-cycle manager</li>
</ul>
</li>
<li>dimensions

<ul>
<li><strong>widget</strong> is a dom demensions life-cycle manager</li>
</ul>
</li>
<li>loom

<ul>
<li><strong>config</strong> is used to config indicator for weave related stuff</li>
<li><strong>unweave</strong> is unweave promise manager</li>
<li><strong>weave</strong> is weave promise manager</li>
<li><strong>woven</strong> is woven promise manager</li>
</ul>
</li>
<li>route

<ul>
<li><strong>uri</strong> is base url factory widget</li>
<li><strong>widget</strong> is listened to "hashchange" event, and manage route life-cycle</li>
</ul>
</li>
<li>store

<ul>
<li><strong>base</strong> is a common storage wrapper</li>
<li><strong>local</strong> is a localStorage wrapper</li>
<li><strong>session</strong> is a seesionStorage wrapper</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li><a href="https://github.com/troopjs/troopjs-data.git">troopjs-data</a>

<ul>
<li>cache

<ul>
<li><strong>component</strong> is cache life-cycle manager</li>
</ul>
</li>
<li>component

<ul>
<li><strong>widget</strong> is a common query widget wrapper</li>
</ul>
</li>
<li>query

<ul>
<li><strong>component</strong> is a cache manager to support mutiple cache process stuff</li>
<li><strong>service</strong> is a batch query service life-cycle manager</li>
</ul>
</li>
<li>store

<ul>
<li><strong>component</strong> is storage util wrapper used to process different storage stuff</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troopjs internal design analysis]]></title>
    <link href="http://zjhiphop.github.com/blog/2013/08/12/troopjs-internal-design-analysis/"/>
    <updated>2013-08-12T13:52:00+08:00</updated>
    <id>http://zjhiphop.github.com/blog/2013/08/12/troopjs-internal-design-analysis</id>
    <content type="html"><![CDATA[<h3>Which problems does this framework try to solve ?</h3>

<ul>
<li>Front-end developers should know as little as possible
about back-end as possible</li>
<li>UI is client specific, keep it there</li>
<li>Code that accomplishes a single task should live all
live together in one place</li>
<li>Modifying a component should not affect the whole
application</li>
<li>Avoid boilerplate code</li>
<li>Stay DRY</li>
</ul>


<h3>Which solutions does this framework can give ?</h3>

<ul>
<li>Back-end should be a service provider shared
among all clients</li>
<li>Generate your UI on the client, but separate
from logic (MVC)</li>
<li>Write components, not snippets (AMD)</li>
<li>Connect components (PubSub)</li>
<li>Convention over configuration</li>
<li>Pick framework(s) (but KISS)</li>
</ul>


<h3>Whcih Libs does this framework use?</h3>

<ul>
<li><a href="https://github.com/jrburke/requirejs" title="RequireJS">RequireJS</a></li>
<li><a href="https://github.com/kriszyp/compose" title="ComposeJS">ComposeJS</a></li>
<li><a href="https://github.com/jquery/jquery" title="jQuery">jQuery</a></li>
<li><a href="https://github.com/jburke/r.js" title="R.js">R.js</a></li>
<li><a href="https://github.com/cowboy/grunt" title="Grunt">Grunt</a></li>
<li><a href="https://github.com/cujojs/when" title="When.js">When.js</a></li>
<li><a href="https://github.com/cujojs/poly" title="poly.js">poly.js</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troopjs Introduce]]></title>
    <link href="http://zjhiphop.github.com/blog/2013/08/12/troopjs-introduce/"/>
    <updated>2013-08-12T11:49:00+08:00</updated>
    <id>http://zjhiphop.github.com/blog/2013/08/12/troopjs-introduce</id>
    <content type="html"><![CDATA[<pre><code>The **more** you write, the **uglier** it gets. -Mikael
</code></pre>

<h3>What's that?</h3>

<ul>
<li>Troopjs is a javascript framework, based on Mix-in and Compose patterns.</li>
</ul>


<h3>Why we should use it?</h3>

<ul>
<li>It's intuitive and strightforward</li>
<li>It's very easy and powerful</li>
</ul>


<h3>Pros ?</h3>

<ul>
<li>Object-Based Inheritance For ECMAScript 5</li>
<li>Internal template engine</li>
<li>Logic simple</li>
<li>Consist Async operation</li>
<li>Life cycle management system</li>
</ul>


<h3>Cons ?</h3>

<ul>
<li>Don't have a model abstraction, it's data model is controlled by service</li>
<li>Document is less</li>
</ul>


<h3><a href="https://github.com/troopjs" title="TroopJS">Project address</a></h3>
]]></content>
  </entry>
  
</feed>
