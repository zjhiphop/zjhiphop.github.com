<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thinking in js | Jade's fantastic Blog]]></title>
  <link href="http://zjhiphop.github.com/blog/categories/thinking-in-js/atom.xml" rel="self"/>
  <link href="http://zjhiphop.github.com/"/>
  <updated>2012-08-14T10:24:54+08:00</updated>
  <id>http://zjhiphop.github.com/</id>
  <author>
    <name><![CDATA[zjhiphop]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[interesting_js_puzzle]]></title>
    <link href="http://zjhiphop.github.com/blog/2012/07/05/interesting-js-puzzle/"/>
    <updated>2012-07-05T14:42:00+08:00</updated>
    <id>http://zjhiphop.github.com/blog/2012/07/05/interesting-js-puzzle</id>
    <content type="html"><![CDATA[<ol>
<li><p>找出数字数组中最大的元素（使用Match.max函数）</p>

<p> Math.max.apply(null,[1,2,3]);</p></li>
<li><p>转化一个数字数组为function数组（每个function都弹出相应的数字）</p>

<p> (function(a) {
 var r=[];while(a.length){r.push(function(t){return function(){return t}}(a.pop()))} return r
 })([1,2,3])</p></li>
<li><p>给object数组进行排序（排序条件是每个元素对象的属性个数）</p>

<p> [{a:1,b:34},{a:45},{a:23,b:56,c:90}].sort(function(a,b){
 if(Object.keys) return Object.keys(a).length-Object.keys(b).length;
 var i=0,j;
 for(j in a){</p>

<pre><code> if(a.hasOwnProperty(j)) i++;
</code></pre>

 }
 for(j in b){

<pre><code> if(a.hasOwnProperty(j)) i--;
</code></pre>

<p> }
 return i;
 })</p></li>
<li><p>利用JavaScript打印出Fibonacci数（不使用全局变量）</p>

<p> (function print(n){</p>

<pre><code> var arr=[],i=1;
 if(n===1){
     arr=[1];
 }else if(n===2){
     arr=[1,1];
 }else if(n&gt;0){
     arr.push(1,1);
     while(++i&lt;n){
         arr[i]=arr[i-1]+arr[i-2];
     };
 }

 return arr;
</code></pre>

<p> })(6);</p></li>
<li><p>实现如下语法的功能：var a = (5).plus(3).minus(6);</p>

<p> Number.prototype.plus=function(a){</p>

<pre><code> return this+a;
</code></pre>

 }
 Number.prototype.minus=function(b){

<pre><code> return this-b;
</code></pre>

<p> }
 var a = (5).plus(3).minus(6)</p></li>
<li><p>实现如下语法的功能：var a = add(2)(3)(4);</p>

<p> function add(a){</p>

<pre><code>return function(b){
     return function(c){
         return a+b+c;
     }
}
</code></pre>

<p> }
 var a = add(2)(3)(4)</p></li>
</ol>


<p>Others interesting will coming soon...</p>
]]></content>
  </entry>
  
</feed>
