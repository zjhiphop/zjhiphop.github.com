<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha256-Z1K5uhUaJXA7Ll0XrZ/0JhX4lAtZFpT6jkKrEDT0drU=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"zjhihpop.github.io","root":"/","images":"/images","scheme":"Muse","darkmode":false,"version":"8.14.1","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":{"enable":false,"style":null},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":false,"motion":{"enable":true,"async":false,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"}}</script><script src="/js/config.js"></script>

    <meta name="description" content="本文讨论关于数组排序算法的实现， 给定一个整形数组，按从小到大排列 常见的排序算法有：插入排序， 选择排序，冒泡排序，快速排序，归并排序等 插入排序 两种实现方案，第一种方法是新建一个数组并按序排列，遍历原始数组复制元素到新的数组， 时间复杂度为 O(n * n), 空间复杂度为O(n)， 同时为不稳定的排序; 另一种方式是在原地选择和排序，数组分为两部分，左边是已排序的部分，右边是带排序的部分，">
<meta property="og:type" content="article">
<meta property="og:title" content="排序算法（上）">
<meta property="og:url" content="http://zjhihpop.github.io/2019/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">
<meta property="og:site_name" content="Jade&#39;s Fantastic Blog">
<meta property="og:description" content="本文讨论关于数组排序算法的实现， 给定一个整形数组，按从小到大排列 常见的排序算法有：插入排序， 选择排序，冒泡排序，快速排序，归并排序等 插入排序 两种实现方案，第一种方法是新建一个数组并按序排列，遍历原始数组复制元素到新的数组， 时间复杂度为 O(n * n), 空间复杂度为O(n)， 同时为不稳定的排序; 另一种方式是在原地选择和排序，数组分为两部分，左边是已排序的部分，右边是带排序的部分，">
<meta property="og:locale" content="zh_CN">
<meta property="article:published_time" content="2019-08-15T01:51:49.000Z">
<meta property="article:modified_time" content="2023-01-05T04:30:42.644Z">
<meta property="article:author" content="Jade Zhang">
<meta property="article:tag" content="算法">
<meta property="article:tag" content="Algorithm">
<meta name="twitter:card" content="summary">


<link rel="canonical" href="http://zjhihpop.github.io/2019/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"http://zjhihpop.github.io/2019/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95","path":"2019/08/15/排序算法","title":"排序算法（上）"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>排序算法（上） | Jade's Fantastic Blog</title>
  






  <script async defer data-website-id="" src=""></script>

  <script defer data-domain="" src=""></script>

  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">Jade's Fantastic Blog</p>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="搜索" role="button">
    </div>
  </div>
</div>







</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F"><span class="nav-number">1.</span> <span class="nav-text">插入排序</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F"><span class="nav-number">2.</span> <span class="nav-text">选择排序</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F"><span class="nav-number">3.</span> <span class="nav-text">冒泡排序</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F"><span class="nav-number">4.</span> <span class="nav-text">归并排序</span></a></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">Jade Zhang</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">11</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-tags">
        <span class="site-state-item-count">8</span>
        <span class="site-state-item-name">标签</span>
      </div>
  </nav>
</div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://zjhihpop.github.io/2019/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="Jade Zhang">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="Jade's Fantastic Blog">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="排序算法（上） | Jade's Fantastic Blog">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          排序算法（上）
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2019-08-15 09:51:49" itemprop="dateCreated datePublished" datetime="2019-08-15T09:51:49+08:00">2019-08-15</time>
    </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar-check"></i>
      </span>
      <span class="post-meta-item-text">更新于</span>
      <time title="修改时间：2023-01-05 12:30:42" itemprop="dateModified" datetime="2023-01-05T12:30:42+08:00">2023-01-05</time>
    </span>

  
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <p><em>本文讨论关于数组排序算法的实现， 给定一个整形数组，按从小到大排列</em></p>
<p>常见的排序算法有：插入排序， 选择排序，冒泡排序，快速排序，归并排序等</p>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote>
<p>两种实现方案，第一种方法是新建一个数组并按序排列，遍历原始数组复制元素到新的数组， 时间复杂度为 O(n * n), 空间复杂度为O(n)， 同时为不稳定的排序; 另一种方式是在原地选择和排序，数组分为两部分，左边是已排序的部分，右边是带排序的部分，初始状态左侧为数组第一个元素，右侧为第二个元素之后的元素，从数组中第二个元素开始遍历， 依次插入左侧并排序， 时间复杂度为 O(n * n), 稳定排序</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="comment">// v1: time O(n * n) space O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSortArray1</span> <span class="params">(array []<span class="type">int</span>, length <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// 1. 创建一个新的数组</span></span><br><span class="line">	<span class="comment">// 2. 循环旧的数组数据并复制到插入到新数组的指定位置</span></span><br><span class="line">	<span class="keyword">if</span> length &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> array</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	times := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	newArray := <span class="built_in">make</span>([]<span class="type">int</span>, length, length)</span><br><span class="line"></span><br><span class="line">	newArray[<span class="number">0</span>] = array[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">		index := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j := i<span class="number">-1</span>; j &gt;=<span class="number">0</span> ; j-- &#123;</span><br><span class="line"></span><br><span class="line">			times++</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> array[i] &gt;= newArray[j] &#123;</span><br><span class="line">				index = j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> index &lt; i &#123;</span><br><span class="line">			<span class="keyword">for</span> k:=i<span class="number">-1</span>; k&gt;=index; k-- &#123;</span><br><span class="line">				times++</span><br><span class="line"></span><br><span class="line">				newArray[k + <span class="number">1</span>] = newArray[k]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		newArray[index] = array[i]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;time O(&quot;</span>, times, <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> newArray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v2 time o(n * n) space O(0)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSortArray2</span> <span class="params">( array []<span class="type">int</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// 原地交换数据</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span> &lt;= <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> array</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	times := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i&lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">		curr := array[i]</span><br><span class="line">		j := i<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> ; j&gt;=<span class="number">0</span>; j-- &#123;</span><br><span class="line">			times++</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> array[j] &gt; curr &#123;</span><br><span class="line">				array[j+<span class="number">1</span>] = array[j]</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		array[j+<span class="number">1</span>] = curr</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;time O(&quot;</span>, times, <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote>
<p>遍历数组， 每次取剩下的元素中的最小的元素的下标， 如果找到了就和已排序的元素进行交换， 时间复杂度 O(n * n)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSort1</span><span class="params">(arr []<span class="type">int</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span> &lt;=<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	times := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">		minIndex := i</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j:= i+<span class="number">1</span>; j &lt; <span class="built_in">len</span>; j++ &#123;</span><br><span class="line"></span><br><span class="line">			times++</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> arr[j] &lt; arr[minIndex] &#123;</span><br><span class="line">				minIndex = j</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(times)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote>
<p>比较相邻的数字，将大数字后移， 遍历完一轮右侧是最大的数字，然后在比较第0个元素到第n-1个元素，直到n&#x3D;1, 时间复杂度： O(n * n)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubleSort</span><span class="params">(arr []<span class="type">int</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span> &lt;=<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	flag := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	times := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i :=<span class="number">0</span>; i&lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j :=<span class="number">0</span>; j&lt; <span class="built_in">len</span>-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"></span><br><span class="line">			times++</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">				arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line"></span><br><span class="line">				flag = <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> !flag &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;time:&quot;</span>, times)</span><br><span class="line">&#125;<span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 快速排序</span></span><br><span class="line"><span class="string">&gt; 首先选择一个pivot, 一般选最后一个元素， 然后便利数据从start和end， 如果小于pivot， 那么交换正在比较的两个数据， 第一次对比完成后，pivot所在的索引左边都是小于pivot的数据，右侧都是大于pivot的数据， 然后分别对左侧和右侧数据进行排序， 直到start&gt;=end. 时间复杂度O(logN)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序过程：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j=0, 1, i=0 1</span></span><br><span class="line"><span class="comment">1      111 23 31 43  54 45</span></span><br><span class="line"><span class="comment">&gt; i=1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j=1 111, i=1 1111</span></span><br><span class="line"><span class="comment">1      111    23 31 43  54 45</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j=2 23, i=1 111</span></span><br><span class="line"><span class="comment">1      23    111 31 43  54 45</span></span><br><span class="line"><span class="comment">&gt; i=2 111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j = 3   31</span></span><br><span class="line"><span class="comment">1      23   31 111 43  54 45</span></span><br><span class="line"><span class="comment">&gt; i = 3 111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j = 4, 43</span></span><br><span class="line"><span class="comment">1      23   31 43 111  54 45</span></span><br><span class="line"><span class="comment">&gt; i = 4 111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">j = 5, 54</span></span><br><span class="line"><span class="comment">1      23   31 43 111  54 45</span></span><br><span class="line"><span class="comment">&gt; i=4 111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1      23   31 43 45  54 111</span></span><br><span class="line"><span class="comment">&gt; i =4, j =5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="type">int</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	separate(arr, <span class="number">0</span>, <span class="built_in">len</span><span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;time O(&quot;</span>, times, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">separate</span><span class="params">(arr []<span class="type">int</span>, start,end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i := partition(start, end, arr)</span><br><span class="line"></span><br><span class="line">	separate(arr, start, i<span class="number">-1</span>)</span><br><span class="line">	separate(arr, i+<span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> times <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(start <span class="type">int</span>, end <span class="type">int</span>, arr []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	pivot := arr[end]</span><br><span class="line"></span><br><span class="line">	i := start</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> j :=start; j&lt; end; j++ &#123;</span><br><span class="line">		times++</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> arr[j] &lt; pivot &#123;</span><br><span class="line">			<span class="keyword">if</span> i != j &#123;</span><br><span class="line">				arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			i++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	arr[i], arr[end] = arr[end], arr[i]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote>
<p>将数据分成相等两部分（length &#x2F; 2 &#x3D; mid）， 分别对start到mid和mid到end进行排序， 然后在进行合并， 知道start&gt;&#x3D;end结束遍历， 时间复杂度O(logN), 空间复杂度O(N)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exetimes <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MergeSort</span><span class="params">(arr []<span class="type">int</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span> &lt;=<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sort(arr, <span class="number">0</span>, <span class="built_in">len</span><span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">println</span>(<span class="string">&quot;tims O(&quot;</span>, exetimes, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sort</span><span class="params">(arr []<span class="type">int</span>, start, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> start &gt;=end &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mid := (start + end) /<span class="number">2</span></span><br><span class="line"></span><br><span class="line">	sort(arr, start, mid)</span><br><span class="line">	sort(arr, mid+<span class="number">1</span>, end)</span><br><span class="line">	merge(arr, start, mid, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(arr []<span class="type">int</span>, start, mid, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	temp := <span class="built_in">make</span>([]<span class="type">int</span>, end - start + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	i := start</span><br><span class="line">	j :=mid+<span class="number">1</span></span><br><span class="line">	k := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ; i&lt;=mid &amp;&amp; j&lt;= end; k++ &#123;</span><br><span class="line">		exetimes++</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> arr[i] &gt; arr[j] &#123;</span><br><span class="line">			temp[k] = arr[j]</span><br><span class="line">			j++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			temp[k] = arr[i]</span><br><span class="line">			i++</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ;i&lt;=mid;i++ &#123;</span><br><span class="line">		exetimes++</span><br><span class="line"></span><br><span class="line">		temp[k] = arr[i]</span><br><span class="line">		k++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ;j&lt;=end;j++ &#123;</span><br><span class="line">		exetimes++</span><br><span class="line">		temp[k] = arr[j]</span><br><span class="line">		k++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">copy</span>(arr[start:end+<span class="number">1</span>], temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


    </div>

    
    
    

    <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/%E7%AE%97%E6%B3%95/" rel="tag"># 算法</a>
              <a href="/tags/Algorithm/" rel="tag"># Algorithm</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/2019/08/12/linkedlist" rel="prev" title="Linkedlist">
                  <i class="fa fa-chevron-left"></i> Linkedlist
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/2019/08/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" rel="next" title="排序算法（下）">
                  排序算法（下） <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">


<div class="copyright">
  &copy; 
  <span itemprop="copyrightYear">2023</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Jade Zhang</span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/muse/" rel="noopener" target="_blank">NexT.Muse</a> 强力驱动
  </div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="返回顶部">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/schemes/muse.js"></script><script src="/js/next-boot.js"></script>

  




  





</body>
</html>
